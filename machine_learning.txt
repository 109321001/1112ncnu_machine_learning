from google.colab import drive
drive.mount('/content/drive')



import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator


img_height=240
img_width=240
batchsize=5

#input data

ds_train = tf.keras.utils.image_dataset_from_directory(
    '/content/drive/MyDrive/data',
    labels = 'inferred',
    label_mode = "int",
    color_mode = 'rgb',
    image_size = (img_height,img_width),
    batch_size = batchsize,
    shuffle = True,
    seed = 10,
    validation_split = 0.1,
    subset = "training",
)
validation = tf.keras.utils.image_dataset_from_directory(
    '/content/drive/MyDrive/data',
    labels = 'inferred',
    label_mode = "int",
    color_mode = 'rgb',
    image_size = (img_height,img_width),
    batch_size = batchsize,
    shuffle = True,
    seed = 10,
    validation_split = 0.1,
    subset = "validation",
)

import matplotlib.pyplot as plt

class_names = ds_train.class_names
plt.figure(figsize=(10, 10))
for images, labels in ds_train.take(2):
  for i in range(5):
    ax = plt.subplot(1, 5, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

#build model

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from tensorflow.keras.optimizers import RMSprop

model = Sequential()
model.add(Conv2D(filters=16, kernel_size=(3, 3), input_shape=(img_height,img_width,3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
#model.add(Dense(512, activation='relu', input_shape=(img_height,img_width,3) ))
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
#model.add(Flatten())

print(model.summary())

#compile model

model.compile(loss='binary_crossentropy', optimizer=RMSprop(), metrics=['acc'])
model.fit( ds_train, epochs=10, verbose=1,)

model.evaluate( validation, batch_size=1, verbose=1)

import os
import numpy as np
from tensorflow.keras.preprocessing import image
dir_path='/content/drive/MyDrive/data/predict'

for i in os.listdir(dir_path):
  img = image.load_img(dir_path + '//' + i,target_size=(240,240))
  plt.imshow(img)
  plt.show()

  X=image.img_to_array(img)
  X=np.expand_dims(X,axis=0)
  images=np.vstack([X])

  val = model.predict(images)
  print(val)
from numpy.random.mtrand import f
from tensorflow.keras.models import Model

layer = model.layers
filters, biases = model.layers[0].get_weights()
print(layer[0].name,filters.shape)

#distract convo layer
outputs = [model.layers[0].output]
model_short = Model(inputs=model.inputs, outputs=outputs)
print(model_short.summary())

#load img
img1 = image.load_img('/content/drive/MyDrive/data/predict/1.2.jpg',target_size=(240,240))
plt.imshow(img1)
plt.show()

img1=image.img_to_array(img1)
img1=np.expand_dims(img1,axis=0)
#img1=np.vstack([X])

feature_output = model_short.predict(img1)

#plot
column=4
row=4

for ftr in feature_output:
  fig=plt.figure(figsize=(60,60))
  for i in range(1, column*row+1):
    fig=plt.subplot(row,column,i)

    plt.imshow(ftr[:,:,i])
  plt.show()
